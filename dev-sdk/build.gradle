apply plugin: 'com.android.library'
apply plugin: 'costtime'
costtime {
    enable true
    costAll true
    timeout 10
    enableLog true
}

//region SDK版本号
def version = "4.3.0.5"
def date = "20191121"
//endregion

//region 热修复相关
//是否是热修复的宿主
def isHost = true
//打包版本,热修版本,非热修版本
def enableHotFix = true
//当前热修复包的版本
def hf_code = 0
//endregion

//region bugly上报
def ENABLE_BUGLY = true
def STRICTMODE = true
//endregion

//region 内部日志相关
def logcat = true //开关
def tag_hotfix = "analysys_hotfix" //热修复 tag
def tag_snap = "analysys_snap"//安装列表tag
def tag_upload = "analysys_upload"//上传的tag
def tag_oc = "analysys_oc"//oc的tag
def tag_usm = "analysys_usm"//usm的tag
def tag_netinfo = "analysys_netinfo"//网络扫描的tag
def tag_loc = "analysys_loc"//位置信息的tag
def tag_recerver = "analysys_recerver"//广播接收的tag
def tag_cutoff = "analysys_cutoff"//短路的tag
def tag_stringfog = "analysys_stringfog"//字符串混淆的tag
//endregion

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.0'

    defaultConfig {
        def sdkv = "${version}|${date}";

        buildConfigField "boolean", "IS_HOST", "${isHost}"
        buildConfigField "boolean", "enableHotFix", "${enableHotFix}"
        buildConfigField "String", "SDK_VERSION", "\"${sdkv}\""
        buildConfigField "String", "hf_version", isHost ? "\"${sdkv}\"" : "\"${sdkv}.${hf_code}\""
        buildConfigField "boolean", "ENABLE_BUGLY", "${ENABLE_BUGLY}"
        buildConfigField "boolean", "STRICTMODE", "${STRICTMODE}"

        buildConfigField "boolean", "logcat", "${logcat}"
        buildConfigField "String", "tag_hotfix", "\"${tag_hotfix}\""
        buildConfigField "String", "tag_snap", "\"${tag_snap}\""
        buildConfigField "String", "tag_upload", "\"${tag_upload}\""
        buildConfigField "String", "tag_oc", "\"${tag_oc}\""
        buildConfigField "String", "tag_usm", "\"${tag_usm}\""
        buildConfigField "String", "tag_netinfo", "\"${tag_netinfo}\""
        buildConfigField "String", "tag_loc", "\"${tag_loc}\""
        buildConfigField "String", "tag_recerver", "\"${tag_recerver}\""
        buildConfigField "String", "tag_cutoff", "\"${tag_cutoff}\""
        buildConfigField "String", "tag_stringfog", "\"${tag_stringfog}\""

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            /**打开覆盖率统计开关*/
            //testCoverageEnabled = true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        preDexLibraries false
        maxProcessCount 8
        javaMaxHeapSize "4g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        warningsAsErrors false
        disable "UnusedResources"
        textOutput "stdout"
        textReport false
        disable 'RestrictedApi'
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    testImplementation 'org.robolectric:robolectric:3.0'
    compileOnly files("libs/miit_mdid_1.0.10.aar")
}


task generateJar(type: Copy) {
    from("build/intermediates/bundles/release")
    into "../releasebak"
    include("classes.jar")
    rename("classes.jar", "analysys_track_v" + version + "_" + date + ".jar")
}

task copyDoc(type: Copy) {
    from("../doc")
    into "../releasebak"
    include("*.pdf")
}

//https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Zip.html
task packageZip(type: Zip) {
    from "../releasebak/"
//    destinationDir: 来指定生成zip文件的目录，类型是file(dir,但是不要包含/)
    destinationDir = file("../release")
//    archiveName: 压缩包名字，注意此处不会自动添加后缀
    archiveName = "analysys_track_v" + version + "_" + date + ".zip"
}
task zip(type: Delete) {
    delete "../releasebak"
}
generateJar.dependsOn build
copyDoc.dependsOn generateJar
packageZip.dependsOn copyDoc
zip.dependsOn packageZip