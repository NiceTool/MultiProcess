apply plugin: 'com.android.library'
//****************buildSrc依赖选项*****************
apply plugin: 'analysys_dev_track_tool'

//demo appkey
def demoAppkey = "xx"
//****************打包时配置参数*****************
// 打正式包,正式包开关: bugly关闭，日志关闭，内网地址，严格模式
def isRelease = true
//SDK版本号, 混淆字符串也依赖改行，切勿改动变量名字
def ver = "4.3.1.0"
def date = "20200520"
//SDK子版本，强约束. 00出jar包，非OO出dex包
def subVersion = "00"
// 上传时间，几小时
def default_request_hours = 6
// use https request
def isUseHttps = false
// USM分割时间，单位毫秒。如不使用分割，设置成0即可
// 默认规则: 首次->20小时前-现在  其他->上次发送成功-现在
def default_split_usm_time = 3 * 60 * 60 * 1000

/**
 * MODULE control
 */
// in HTTP Header use Kx, when debug
def isNativeDebug = false
// use netinfo module
def isUseNetInfo = true
//use location module
def isUseLocationInfo = true
// use imei
def isUseIMEI = true
// use mac and bluetooth
def isUseMACAndBluetoothMac = true
//********************子项目控制，只有在isReleases=false时才生效*********************
// 宿主包类型，不需要修改，自动根据子版本强约束。
// 宿主包(jar):true , 热修复包(dex):false
def isPackageJar = ("00" == "${subVersion}") ? true : false
//编译版本内部使用
def version = "${ver}|${date}"
//是否启用严格模式。  true:检测，false: 不检测
def BUILD_USE_STRICTMODE = false
// 包含热修复功能:true ， 不包含热修复功能:false
def enableHotFix = true
// 往对应平台传输错误日志
def ENABLE_BUG_REPORT = true
def DEBUG_URL = true
//所有的log开关,true 打印所有的日志,false,关闭所有的日志
def logcat = true
//debug utils
def debug_utils = true
//当前热修复包的版本,默认是1,需要递增。 暂时没用
def hf_code = "${date}${subVersion}"
//// 测试json结构
//def jp = new String(Base64.encoder.encode(file('proguard.json').text.getBytes("utf-8")), "utf-8")

//********************日志tag相关*********************
//region 内部日志相关
def tag_hotfix = "analysys_hotfix" //热修复 tag
def tag_snap = "analysys_snap"//安装列表tag
def tag_upload = "analysys_upload"//上传的tag
def tag_oc = "analysys_oc"//oc的tag
def tag_usm = "analysys_usm"//usm的tag
def tag_netinfo = "analysys_netinfo"//网络扫描的tag
def tag_loc = "analysys_loc"//位置信息的tag
def tag_recerver = "analysys_recerver"//广播接收的tag
def tag_cutoff = "analysys_cutoff"//短路的tag
def tag_StrMix = "analysys_StrMix"//字符串混淆的tag
//endregion
android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        def sdkv = "${version}"
        if (enableHotFix) {
            sdkv += "${subVersion}"
        }
        // 勿动，调试修改isRelease为false即可
        if (isRelease) {
            ENABLE_BUG_REPORT = false
            DEBUG_URL = false
            logcat = false
            debug_utils = false
            BUILD_USE_STRICTMODE = true
            isUseHttps = true
        }
//        buildConfigField "String", "json_proguard", "\"${jp}\""
        buildConfigField "String", "DEMO_APPKEY", "\"${demoAppkey}\""
        buildConfigField "int", "DEF_REQ_HOUR", "${default_request_hours}"
        buildConfigField "long", "TIME_USM_SPLIT", "${default_split_usm_time}"
        buildConfigField "String", "SDK_VERSION", "\"${sdkv}\""
        buildConfigField "String", "STRING_FOG_KEY", "\"${ver}\""
        buildConfigField "boolean", "IS_HOST", "${isPackageJar}"
        buildConfigField "boolean", "enableHotFix", "${enableHotFix}"
        buildConfigField "boolean", "isUseHttps", "${isUseHttps}"
        buildConfigField "boolean", "DEBUG_UTILS", "${debug_utils}"

        buildConfigField "String", "hf_code", isPackageJar ? "\"0\"" : "\"${hf_code}\""
        buildConfigField "boolean", "ENABLE_BUG_REPORT", "${ENABLE_BUG_REPORT}"
        buildConfigField "boolean", "BUILD_USE_STRICTMODE", "${BUILD_USE_STRICTMODE}"
        buildConfigField "boolean", "DEBUG_URL", "${DEBUG_URL}"
        buildConfigField "boolean", "ENABLE_NETINFO", "${isUseNetInfo}"
        buildConfigField "boolean", "ENABLE_LOCATIONINFO", "${isUseLocationInfo}"
        buildConfigField "boolean", "ENABLE_IMEI", "${isUseIMEI}"
        buildConfigField "boolean", "ENABLE_MAC", "${isUseMACAndBluetoothMac}"

        buildConfigField "boolean", "logcat", "${logcat}"
        buildConfigField "boolean", "isNativeDebug", "${isNativeDebug}"
        buildConfigField "String", "tag_hotfix", "\"${tag_hotfix}\""
        buildConfigField "String", "tag_snap", "\"${tag_snap}\""
        buildConfigField "String", "tag_upload", "\"${tag_upload}\""
        buildConfigField "String", "tag_oc", "\"${tag_oc}\""
        buildConfigField "String", "tag_usm", "\"${tag_usm}\""
        buildConfigField "String", "tag_netinfo", "\"${tag_netinfo}\""
        buildConfigField "String", "tag_loc", "\"${tag_loc}\""
        buildConfigField "String", "tag_recerver", "\"${tag_recerver}\""
        buildConfigField "String", "tag_cutoff", "\"${tag_cutoff}\""
        buildConfigField "String", "tag_StrMix", "\"${tag_StrMix}\""


        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            /**打开覆盖率统计开关*/
            //testCoverageEnabled = true
            minifyEnabled false
            if (isPackageJar) {
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-jar.pro'
            } else {
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-dex.pro'
            }
        }
        release {
            minifyEnabled true
            if (isPackageJar) {
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-jar.pro'
            } else {
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-dex.pro'
            }
        }
    }

    dexOptions {
        preDexLibraries false
        maxProcessCount 8
        javaMaxHeapSize "4g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        warningsAsErrors false
        disable "UnusedResources"
        textOutput "stdout"
        textReport false
        disable 'RestrictedApi'
    }


}


tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    testImplementation 'org.robolectric:robolectric:3.0'
    compileOnly files("libs/miit_mdid_1.0.10.aar")
}

//########################################################################
//#####################################task ###########################
//########################################################################

// zip dir
//def zipPathDir = "../release/${ver}_${date}/"
def zipPathDir = "../release/${ver}/"
def defaultJar = "classes.jar"
def dexSrc = "${zipPathDir}${defaultJar}"

// output file name
def jarname = "analysys_track_v${ver}.jar"
def dexName = "${zipPathDir}v${ver}_${date}_${subVersion}.dex"
def zipName = "analysys_track_v${ver}_${date}.zip"
def mapping = "v${ver}_${date}_${subVersion}_mapping.txt"

task generateJar(type: Copy) {
    from("build/intermediates/aar_main_jar/release")
    into "../releasebak"
    include("${defaultJar}")
    rename("${defaultJar}", "${jarname}")
}

task copyDoc(type: Copy) {
    from("../doc")
    into "../releasebak"
    include("*.pdf")
}

//https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Zip.html
task packageZip(type: Zip) {
    from "../releasebak/"
//    destinationDir: 来指定生成zip文件的目录，类型是file(dir,但是不要包含/)
    destinationDir = file(zipPathDir)
//    archiveName: 压缩包名字，注意此处不会自动添加后缀
//    archiveName = "analysys_track_v" + version.replace("|", "_") + (enableHotFix ? "00.zip" : ".zip")
    archiveName = "${zipName}"
}

task copyJar(type: Copy) {
    from("build/intermediates/aar_main_jar/release")
    into "${zipPathDir}"
    include("${defaultJar}")
}

def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}

def isMacOsX() {
    return org.gradle.internal.os.OperatingSystem.current().isMacOsX()
}

// 执行shell命令.如果是打dex 包，则
task runDx(type: Exec) {
    if (isWindows()) {
        commandLine "cmd", "/c", "dx", "--dex", "--output", "${dexName}", "${dexSrc}"
    } else {
        commandLine "dx", "--dex", "--output", "${dexName}", "${dexSrc}"
    }
}

task docGeneral(type: Exec) {
    if (isMacOsX()) {
        commandLine "../general_doc.sh", "${version}"
    } else {
        commandLine "pwd"
    }
}


task bakMappiing(type: Copy) {
    from("build/outputs/mapping/release")
    into "${zipPathDir}"
    include("mapping.txt")
    rename("mapping.txt", "${mapping}")
//    if (isPackageJar) {
//        rename("mapping.txt", "${ver}-${date}-${subVersion}-jar-mapping.txt")
//    } else {
//        rename("mapping.txt", "${ver}-${date}-${subVersion}-dex-mapping.txt")
//    }
}
task zip(type: Delete) {
    delete "../releasebak"
    delete "../doc/流量审核SDK.pdf"
    delete "${zipPathDir}${defaultJar}"
}


if (isPackageJar) {
    generateJar.dependsOn assemble
    docGeneral.dependsOn generateJar
    copyDoc.dependsOn docGeneral
    packageZip.dependsOn copyDoc
    bakMappiing.dependsOn packageZip
    zip.dependsOn bakMappiing
} else {
    copyJar.dependsOn assemble
    runDx.dependsOn copyJar
    bakMappiing.dependsOn runDx
    zip.dependsOn bakMappiing
}
