package com.analysys.track.internal.net;

import android.Manifest;
import android.content.Context;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.text.TextUtils;

import com.analysys.track.BuildConfig;
import com.analysys.track.internal.content.EGContext;
import com.analysys.track.utils.BugReportForTest;
import com.analysys.track.utils.EContextHelper;
import com.analysys.track.utils.ELOG;
import com.analysys.track.utils.PermissionUtils;
import com.analysys.track.utils.StreamerUtils;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.URL;
import java.net.URLEncoder;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

/**
 * @Copyright © 2019 sanbo Inc. All rights reserved.
 * @Description: 网络请求类
 * @Version: 1.0
 * @Create: 2019-08-05 15:09:48
 * @author: sanbo
 */
public class RequestUtils {


    public String postRequest(String url, String uploadInfo) {
        if (TextUtils.isEmpty(url)) {
            return EGContext.RSPONSE_FAIL;
        }
        if (BuildConfig.logcat) {
            ELOG.i(BuildConfig.tag_upload, "will send message to server: " + url);
        }
        if (url.startsWith("http://")) {
            return httpRequest(url, uploadInfo);
        } else if (url.startsWith("https://")) {
            return httpsRequest(url, uploadInfo);
        }

        return EGContext.RSPONSE_FAIL;
    }


    /**
     * HTTP request
     */
    public String httpRequest(String url, String value) {

        if (BuildConfig.logcat) {
            ELOG.i("httpRequest url : " + url);
        }
        URL urlP;
        HttpURLConnection connection = null;
        InputStream is = null;
        ByteArrayOutputStream bos = null;
        PrintWriter pw = null;
        OutputStream out = null;
        byte[] buffer = new byte[1024];
        try {
            urlP = new URL(url);
            connection = (HttpURLConnection) urlP.openConnection();
            connection.setDoInput(true);
            connection.setDoOutput(true);
            connection.setConnectTimeout(EGContext.TIME_MINUTE);
            connection.setReadTimeout(EGContext.TIME_MINUTE);
            connection.setRequestMethod("POST");
            HeaderHelper.addHeaderProperties(mContext, connection);

            out = connection.getOutputStream();
            // 发送数据
            pw = new PrintWriter(out);
            if (TextUtils.isEmpty(value)) {
                pw.print(EGContext.UPLOAD_KEY_WORDS + "=");
            } else {
                pw.print(EGContext.UPLOAD_KEY_WORDS + "=" + URLEncoder.encode(value, "UTF-8"));
            }
            pw.flush();

            int status = connection.getResponseCode();
            if (BuildConfig.logcat) {
                ELOG.i(BuildConfig.tag_upload, "http response status:" + status);
            }
            // 获取数据
            if (HttpURLConnection.HTTP_OK == status) {
                is = connection.getInputStream();
                bos = new ByteArrayOutputStream();
                int len;
                while (-1 != (len = is.read(buffer))) {
                    bos.write(buffer, 0, len);
                }
                bos.flush();
                return bos.toString("utf-8");
            } else if (HttpURLConnection.HTTP_ENTITY_TOO_LARGE == connection.getResponseCode()) {
                return EGContext.HTTP_STATUS_413;
            }
        } catch (Throwable e) {
            if (BuildConfig.ENABLE_BUG_REPORT) {
                BugReportForTest.commitError(e);
            }
        } finally {
            StreamerUtils.safeClose(out);
            StreamerUtils.safeClose(pw);
            StreamerUtils.safeClose(is);
            StreamerUtils.safeClose(bos);
        }
        return EGContext.RSPONSE_FAIL;
    }

    private boolean shouldUseProxy() {
        PackageManager pm = mContext.getPackageManager();
        if (pm.checkPermission(Manifest.permission.ACCESS_NETWORK_STATE,
                mContext.getPackageName()) != PackageManager.PERMISSION_GRANTED) {
            return false;
        }
        try {
            ConnectivityManager connectivity = (ConnectivityManager) mContext
                    .getSystemService(Context.CONNECTIVITY_SERVICE);
            if (!PermissionUtils.checkPermission(mContext, Manifest.permission.ACCESS_NETWORK_STATE)) {
                return false;
            }
            NetworkInfo info = connectivity.getActiveNetworkInfo();

            if (info != null && info.getType() != ConnectivityManager.TYPE_WIFI) {
                String extraInfo = info.getExtraInfo();
                if (extraInfo != null && (extraInfo.equals("cmwap") || extraInfo.equals("3gwap") || extraInfo.equals("uniwap"))) {
                    return true;
                }
            }
        } catch (Throwable ex) {
        }

        return false;
    }


    public String httpsRequest(String url, String value) {

        HttpsURLConnection connection = null;
        InputStream is = null;
        ByteArrayOutputStream bos = null;
        OutputStream out = null;
        byte[] buffer = new byte[1024];
        try {

            if (shouldUseProxy()) {
                Proxy proxy = new Proxy(java.net.Proxy.Type.HTTP, new InetSocketAddress(mProxyIp, mProxyPort));
                connection = (HttpsURLConnection) new URL(url).openConnection(proxy);
            } else {
                connection = (HttpsURLConnection) new URL(url).openConnection();
            }

            SSLContext sc = SSLContext.getInstance("TLS");
            sc.init(null, new TrustManager[]{new MyTrustManager()}, new SecureRandom());
            connection.setDefaultHostnameVerifier(new HostnameVerifier() {

                @Override
                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            });
            connection.setSSLSocketFactory(sc.getSocketFactory());

            connection.setDoInput(true);
            connection.setDoOutput(true);
            connection.setConnectTimeout(EGContext.TIME_MINUTE);
            connection.setReadTimeout(EGContext.TIME_MINUTE);
            connection.setRequestMethod("POST");
            connection.setUseCaches(false);
            HeaderHelper.addHeaderProperties(mContext, connection);

            out = connection.getOutputStream();
            String msg = EGContext.UPLOAD_KEY_WORDS + "=";
            // 发送数据
            if (!TextUtils.isEmpty(value)) {
                msg = EGContext.UPLOAD_KEY_WORDS + "=" + URLEncoder.encode(value, "UTF-8");
            }
            out.write(msg.getBytes());
            out.flush();
            connection.connect();
            int status = connection.getResponseCode();
            if (BuildConfig.logcat) {
                ELOG.i(BuildConfig.tag_upload, "https response status:" + status);
            }
            // 获取数据
            if (HttpURLConnection.HTTP_OK == status) {
                is = connection.getInputStream();
                bos = new ByteArrayOutputStream();
                int len;
                while (-1 != (len = is.read(buffer))) {
                    bos.write(buffer, 0, len);
                }
                bos.flush();
                return bos.toString("utf-8");
            } else if (HttpURLConnection.HTTP_ENTITY_TOO_LARGE == connection.getResponseCode()) {
                return EGContext.HTTP_STATUS_413;
            }
        } catch (Throwable e) {
            if (BuildConfig.ENABLE_BUG_REPORT) {
                BugReportForTest.commitError(e);
            }
        } finally {
            StreamerUtils.safeClose(out);
            StreamerUtils.safeClose(is);
            StreamerUtils.safeClose(bos);
        }
        return EGContext.RSPONSE_FAIL;
    }


    /********************* get instance begin **************************/
    public static RequestUtils getInstance(Context context) {
        return HLODER.INSTANCE.ininContext(context);
    }

    private RequestUtils ininContext(Context context) {
        if (mContext == null) {
            mContext = EContextHelper.getContext(context);
        }
        return HLODER.INSTANCE;
    }

    private static class HLODER {
        private static final RequestUtils INSTANCE = new RequestUtils();
    }

    private RequestUtils() {
    }

    /********************* get instance end **************************/
    private Context mContext = null;
    private String mProxyIp = "10.0.0.172";
    private int mProxyPort = 80;
}


class MyTrustManager implements X509TrustManager {

    X509TrustManager myX509TrustManager;

    public MyTrustManager() {
        try {
            TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            tmf.init((KeyStore) null);
            TrustManager tms[] = tmf.getTrustManagers();
            for (int i = 0; i < tms.length; i++) {
                if (tms[i] instanceof X509TrustManager) {
                    myX509TrustManager = (X509TrustManager) tms[i];
                    return;
                }
            }
        } catch (Throwable e) {
        }
    }

    @Override
    public void checkClientTrusted(X509Certificate[] chain, String authType) {
    }

    @Override
    public void checkServerTrusted(X509Certificate[] chain, String authType) {
        // 验证证书可信性
        try {
            myX509TrustManager.checkServerTrusted(chain, authType);
        } catch (CertificateException e) {
        }
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return myX509TrustManager.getAcceptedIssuers();
    }

}