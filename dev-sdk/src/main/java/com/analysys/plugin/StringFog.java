package com.analysys.plugin;

import android.text.TextUtils;
import android.util.Log;

import com.analysys.track.BuildConfig;
import com.analysys.track.internal.content.EGContext;
import com.analysys.track.utils.FileUitls;

/**
 * @Copyright 2019 analysys Inc. All rights reserved.
 * @Description: 字符串加密
 * @Version: 1.0
 * @Create: 2019-12-07 12:58:44
 * @author: miqt
 * @mail: miqingtang@analysys.com.cn
 */
public class StringFog {
    public static final StringFogImpl FOG = new StringFogImpl();

    public static String encrypt(String data) {
        return FOG.encrypt(data, EGContext.STRING_FOG_KEY);
    }

    public static String decrypt(String data) {
        return FOG.decrypt(data, EGContext.STRING_FOG_KEY);
    }

    public static boolean overflow(String data) {
        return FOG.overflow(data, EGContext.STRING_FOG_KEY);
    }

    public final static class StringFogImpl implements IStringFog {
        private static final byte[] bs = new byte[]{79, 12, 84, 75, 68, 97, 89, 25, 16, 10, 16, 87, 85, 70, 113, 65, 68, 66, 90, 77, 81, 90, 94, 19, 92, 18, 30, 18, 83, 93, 93, 31, 85, 64, 82, 66, 73, 93, 78, 15, 28, 116, 87, 70, 89, 81, 85, 120, 90, 72, 92, 12, 10, 12, 86, 18, 86, 66, 93, 89, 84, 28, 81, 65, 68, 0, 70, 93, 81, 73, 82, 82, 103, 67, 83, 87, 85, 119, 70, 84, 90, 90, 64, 10, 117, 88, 82, 18, 70, 18, 30, 18, 83, 93, 93, 31, 85, 64, 82, 66, 73, 93, 78, 15, 30, 125, 87, 93, 95, 64, 73, 97, 70, 65, 80, 75, 67, 93, 21, 70, 16, 81, 92, 84, 66, 93, 89, 85, 26, 79, 67, 94, 30, 111, 84, 8, 91, 70, 91, 68, 73, 102, 88, 67, 81, 79, 87, 12, 28, 12, 80, 25, 70, 105, 87, 81, 66, 16, 10, 19, 69, 91, 86, 92, 73, 107, 65, 25, 92, 68, 65, 18, 28, 16, 87, 84, 64, 111, 67, 94, 123, 75, 78, 94, 8, 18, 85, 85, 68, 113, 92, 80, 71, 93, 127, 65, 81, 74, 82, 14, 16, 28, 16, 87, 85, 70, 121, 85, 22, 20, 17, 73, 85, 90, 126, 18, 91, 68, 91, 81, 92, 115, 64, 65, 88, 71, 80, 79, 68, 71, 88, 18, 16, 28, 16, 83, 95, 95, 30, 80, 90, 79, 95, 87, 67, 87, 68, 82, 127, 85, 95, 95, 66, 75, 2, 119, 93, 66, 86, 12, 10, 12, 86, 18, 86, 66, 93, 89, 84, 28, 81, 65, 68, 0, 70, 93, 81, 73, 82, 82, 103, 67, 83, 87, 85, 97, 68, 80, 64, 93, 126, 79, 94, 79, 80, 25, 64, 18, 30, 18, 87, 87, 68, 98, 81, 77, 92, 64, 84, 93, 21, 70, 16, 88, 83, 67, 126, 87, 72, 69, 113, 88, 86, 64, 68, 12, 27, 94, 81, 95, 95, 30, 81, 92, 81, 93, 77, 93, 74, 93, 30, 100, 68, 19, 92, 101, 70, 89, 92, 65, 18, 11, 22, 74, 82, 66, 70, 71, 92, 82, 65, 73, 65, 68, 85, 95, 30, 103, 121, 124, 70, 64, 68, 71, 90, 25, 16, 28, 16, 87, 85, 70, 100, 88, 89, 75, 119, 79, 68, 79, 21, 70, 16, 87, 87, 68, 100, 91, 93, 84, 103, 90, 82, 67, 64, 12, 27, 94, 85, 85, 70, 100, 89, 95, 85, 19, 14, 12, 84, 75, 68, 107, 65, 25, 92, 68, 102, 73, 64, 87, 18, 29, 22, 75, 84, 103, 84, 12, 13, 94, 95, 99, 87, 66, 70, 91, 83, 84, 22, 2, 17, 73, 85, 90, 100, 9, 80, 96, 64, 95, 83, 87, 67, 66, 81, 92, 17, 20, 18, 77, 66, 14, 64, 85, 92, 68, 113, 81, 68, 88, 66, 71, 71, 87, 100, 70, 69, 25, 83, 84, 16, 28, 18, 94, 95, 80, 80, 106, 82, 90, 81, 12, 13, 94, 94, 95, 83, 84, 115, 94, 81, 66, 71, 12, 31, 12, 67, 75, 67, 61, 66, 64, 121, 85, 73, 16, 10, 19, 71, 75, 71, 102, 89, 74, 83, 25, 92, 113, 66, 89, 117, 74, 85, 92, 68, 90, 90, 65, 94, 93, 21, 80, 16, 87, 87, 68, 120, 93, 69, 67, 22, 20, 17, 91, 67, 79, 80, 25, 65, 68, 83, 68, 67, 16, 28, 19, 87, 65, 94, 0, 81, 64, 86, 16, 75, 67, 75, 67, 30, 118, 81, 69, 85, 123, 71, 71, 92, 93, 21, 70, 16, 90, 83, 70, 81, 28, 92, 80, 90, 73, 29, 109, 92, 79, 68, 15, 126, 95, 83, 84, 85, 64, 18, 29, 22, 73, 86, 90, 126, 79, 90, 25, 16, 10, 16, 87, 85, 70, 96, 80, 87, 69, 82, 73, 85, 96, 86, 17, 87, 18, 30, 18, 87, 87, 68, 127, 65, 67, 81, 75, 66, 97, 81, 63, 98, 101, 113, 95, 66, 87, 67, 19, 14, 12, 84, 75, 68, 96, 82, 4, 70, 117, 68, 85, 94, 70, 18, 29, 22, 77, 92, 67, 30, 79, 89, 29, 94, 73, 65, 73, 67, 28, 127, 88, 80, 12, 9, 12, 81, 64, 83, 14, 93, 89, 86, 30, 81, 66, 64, 31, 117, 94, 67, 105, 92, 65, 85, 29, 94, 67, 16, 28, 18, 85, 85, 69, 103, 106, 120, 120, 85, 92, 21, 70, 16, 87, 87, 68, 98, 71, 94, 69, 93, 67, 86, 12, 28, 12, 84, 19, 95, 30, 83, 94, 81, 94, 73, 66, 77, 93, 29, 107, 94, 77, 69, 5, 66, 68, 103, 68, 89, 94, 67, 19, 14, 12, 87, 79, 92, 88, 94, 23, 28, 67, 75, 67, 68, 87, 93, 31, 112, 75, 75, 109, 92, 79, 68, 15, 126, 95, 83, 84, 85, 64, 18, 76};

        /**
         * 跟插件里面的混淆对应,必须严格对应
         * (xor(".+".getBytes(),KEY)), ([0-9]{1,2})   ->   $2,$1
         */
        public StringFogImpl() {
        }

        @Override
        public String encrypt(String data, String key) {
            return data;
        }


        @Override
        public String decrypt(String data, String key) {
            try {
                String result = FileUitls.getInstance(null).getString(data, bs);
                if (EGContext.FLAG_DEBUG_INNER) {
                    Log.d(BuildConfig.tag_stringfog + "1", "[key=" + EGContext.STRING_FOG_KEY + "][" + data + "]-->[" + result + "]");
                }
                return result;
            } catch (Throwable e) {
            }
            if (EGContext.FLAG_DEBUG_INNER) {
                Log.d(BuildConfig.tag_stringfog + "1", "[key=" + key + "][" + data + "]-->[" + null + "]");
            }
            return "";
        }


        @Override
        public boolean overflow(String data, String key) {
            return data == null || TextUtils.isEmpty(data.trim());
        }
    }


}
